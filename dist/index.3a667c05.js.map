{"mappings":"ACcA,eAAe,IACX,GAAI,CAEA,IAAM,EAAW,MAAM,MAAM,+CAEvB,EAAO,MAAM,EAAS,IAAI,IAGhC,AAOR,SAAqB,CAAI,EACrB,IAAM,EAAY,SAAS,cAAc,CAAC,qBAC1C,CAAA,EAAU,SAAS,CAAG,GAEtB,EAAK,OAAO,CAAC,AAAA,IACT,IAAM,EAAM,SAAS,aAAa,CAAC,KACnC,CAAA,EAAI,SAAS,CAAG,CAAC,IAAI,EAAE,EAAO,IAAI,CAAC;4BACf,EAAE,EAAO,UAAU,CAAC;4BACpB,EAAE,EAAO,WAAW,CAAC,KAAK,CAAC,CAC/C,EAAU,WAAW,CAAC,EAC1B,EACJ,EAlBoB,EAChB,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,uBAAwB,EAC1C,CACJ,CAgCA,SAAS,IACL,IAAM,EAAQ,SAAS,cAAc,CAAC,eAAe,KAAK,CAAC,WAAW,GAGtE,AAFa,SAAS,cAAc,CAAC,sBAAsB,gBAAgB,CAAC,MAEvE,OAAO,CAAC,AAAA,IACT,IAAM,EAAa,EAAI,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,WAAW,GACtE,EAAa,EAAI,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,WAAW,EAExE,CAAA,EAAW,QAAQ,CAAC,IAAU,EAAW,QAAQ,CAAC,GAClD,EAAI,KAAK,CAAC,OAAO,CAAG,GAEpB,EAAI,KAAK,CAAC,OAAO,CAAG,MAE5B,EACJ,CAxEA,SAAS,gBAAgB,CAAC,mBAAoB,KAC1C,IAGA,SAAS,cAAc,CAAC,eAAe,gBAAgB,CAAC,QAAS,GAIjE,AADoB,SAAS,gBAAgB,CAAC,sBAClC,OAAO,CAAC,CAAC,EAAM,KACvB,EAAK,gBAAgB,CAAC,QAAS,IAAM,AAkC7C,CAAA,SAAmB,CAAW,EAC1B,IAAM,EAAQ,SAAS,cAAc,CAAC,kBAChC,EAAO,MAAM,IAAI,CAAC,SAAS,cAAc,CAAC,sBAAsB,gBAAgB,CAAC,OAEvF,EAAK,IAAI,CAAC,CAAC,EAAG,KACV,IAAM,EAAQ,EAAE,oBAAoB,CAAC,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GAClE,EAAQ,EAAE,oBAAoB,CAAC,KAAK,CAAC,EAAY,CAAC,WAAW,CAAC,IAAI,GACxE,OAAO,EAAM,aAAa,CAAC,EAC/B,GAEA,EAAM,OAAO,CAAC,EAAE,CAAC,SAAS,CAAG,GAC7B,EAAK,OAAO,CAAC,AAAA,GAAO,EAAM,OAAO,CAAC,EAAE,CAAC,WAAW,CAAC,GACrD,CAAA,EA9CuD,GACnD,EACJ","sources":["<anon>","src/script.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    fetchDataAndPopulateTable();\n    // Add event listener to the search input\n    document.getElementById(\"searchInput\").addEventListener(\"input\", filterTable);\n    // Add event listener to each table header cell for sorting\n    const headerCells = document.querySelectorAll(\"#frameworkTable th\");\n    headerCells.forEach((cell, index)=>{\n        cell.addEventListener(\"click\", ()=>sortTable(index));\n    });\n});\n// Asynchronous function to fetch data and populate the table\nasync function fetchDataAndPopulateTable() {\n    try {\n        const response = await fetch(\"https://dahlgren.miun.se/ramschema_ht23.php\");\n        // Parse the JSON data from the response\n        const data = await response.json();\n        renderTable(data);\n    } catch (error) {\n        console.error(\"Error fetching data:\", error);\n    }\n}\n// Function to render the table with the provided data\nfunction renderTable(data) {\n    const tableBody = document.getElementById(\"frameworkTableBody\");\n    tableBody.innerHTML = \"\";\n    data.forEach((course)=>{\n        const row = document.createElement(\"tr\");\n        row.innerHTML = `<td>${course.code}</td>\r\n                        <td>${course.coursename}</td>\r\n                        <td>${course.progression}</td>`;\n        tableBody.appendChild(row);\n    });\n}\n// Function to sort the table based on the specified column index\nfunction sortTable(columnIndex) {\n    const table = document.getElementById(\"frameworkTable\");\n    const rows = Array.from(document.getElementById(\"frameworkTableBody\").querySelectorAll(\"tr\"));\n    rows.sort((a, b)=>{\n        const cellA = a.getElementsByTagName(\"td\")[columnIndex].textContent.trim();\n        const cellB = b.getElementsByTagName(\"td\")[columnIndex].textContent.trim();\n        return cellA.localeCompare(cellB);\n    });\n    table.tBodies[0].innerHTML = \"\";\n    rows.forEach((row)=>table.tBodies[0].appendChild(row));\n}\n// Function to filter the table based on the search input\nfunction filterTable() {\n    const input = document.getElementById(\"searchInput\").value.toLowerCase();\n    const rows = document.getElementById(\"frameworkTableBody\").querySelectorAll(\"tr\");\n    rows.forEach((row)=>{\n        const courseCode = row.getElementsByTagName(\"td\")[0].textContent.toLowerCase();\n        const courseName = row.getElementsByTagName(\"td\")[1].textContent.toLowerCase();\n        if (courseCode.includes(input) || courseName.includes(input)) row.style.display = \"\";\n        else row.style.display = \"none\";\n    });\n}\n\n//# sourceMappingURL=index.3a667c05.js.map\n","document.addEventListener('DOMContentLoaded', () => {\r\n    fetchDataAndPopulateTable();\r\n\r\n    // Add event listener to the search input\r\n    document.getElementById('searchInput').addEventListener('input', filterTable);\r\n\r\n    // Add event listener to each table header cell for sorting\r\n    const headerCells = document.querySelectorAll('#frameworkTable th');\r\n    headerCells.forEach((cell, index) => {\r\n        cell.addEventListener('click', () => sortTable(index));\r\n    });\r\n});\r\n\r\n// Asynchronous function to fetch data and populate the table\r\nasync function fetchDataAndPopulateTable() {\r\n    try {\r\n        \r\n        const response = await fetch('https://dahlgren.miun.se/ramschema_ht23.php');\r\n        // Parse the JSON data from the response\r\n        const data = await response.json();\r\n\r\n        \r\n        renderTable(data);\r\n    } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n    }\r\n}\r\n\r\n// Function to render the table with the provided data\r\nfunction renderTable(data) {\r\n    const tableBody = document.getElementById('frameworkTableBody');\r\n    tableBody.innerHTML = '';\r\n\r\n    data.forEach(course => {\r\n        const row = document.createElement('tr');\r\n        row.innerHTML = `<td>${course.code}</td>\r\n                        <td>${course.coursename}</td>\r\n                        <td>${course.progression}</td>`;\r\n        tableBody.appendChild(row);\r\n    });\r\n}\r\n\r\n// Function to sort the table based on the specified column index\r\nfunction sortTable(columnIndex) {\r\n    const table = document.getElementById('frameworkTable');\r\n    const rows = Array.from(document.getElementById('frameworkTableBody').querySelectorAll('tr'));\r\n    \r\n    rows.sort((a, b) => {\r\n        const cellA = a.getElementsByTagName('td')[columnIndex].textContent.trim();\r\n        const cellB = b.getElementsByTagName('td')[columnIndex].textContent.trim();\r\n        return cellA.localeCompare(cellB);\r\n    });\r\n\r\n    table.tBodies[0].innerHTML = '';\r\n    rows.forEach(row => table.tBodies[0].appendChild(row));\r\n}\r\n\r\n// Function to filter the table based on the search input\r\nfunction filterTable() {\r\n    const input = document.getElementById('searchInput').value.toLowerCase();\r\n    const rows = document.getElementById('frameworkTableBody').querySelectorAll('tr');\r\n\r\n    rows.forEach(row => {\r\n        const courseCode = row.getElementsByTagName('td')[0].textContent.toLowerCase();\r\n        const courseName = row.getElementsByTagName('td')[1].textContent.toLowerCase();\r\n\r\n        if (courseCode.includes(input) || courseName.includes(input)) {\r\n            row.style.display = '';\r\n        } else {\r\n            row.style.display = 'none';\r\n        }\r\n    });\r\n}\r\n"],"names":["fetchDataAndPopulateTable","response","fetch","data","json","renderTable","tableBody","document","getElementById","innerHTML","forEach","course","row","createElement","code","coursename","progression","appendChild","error","console","filterTable","input","value","toLowerCase","rows","querySelectorAll","courseCode","getElementsByTagName","textContent","courseName","includes","style","display","addEventListener","headerCells","cell","index","sortTable","columnIndex","table","Array","from","sort","a","b","cellA","trim","cellB","localeCompare","tBodies"],"version":3,"file":"index.3a667c05.js.map"}